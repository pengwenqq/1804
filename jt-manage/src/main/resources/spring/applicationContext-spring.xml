<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	<!--1.开启包扫描 默认会扫描包下的全部子包 不进一步扫描是因为要扫描common工具类 -->
	<context:component-scan base-package="com.jt" />

	<!--2.引入外部配置文件 不能解决同需求文件 -->
	<!-- <context:property-placeholder location="classpath:/properties/*.properties"/> -->

	<!--2.引入外部配置文件 能解决同需求文件,细粒度配置 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
		<property name="locations">
			<list>
				<value>classpath:/properties/jdbc.properties</value>
				<value>classpath:/properties/redis.properties</value>
			</list>
		</property>
	</bean>

	<!--3.数据源配置dataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!--4.AOP技术实现事务控制 在原有方法的基础上，对方法进行扩展 通知：前置通知 后置通知 异常通知 最终通知 作用：记录程序执行的过程 
		最为重要的通知类型：环绕通知 作用：可以改变程序的执行状态 通知的用途： 对业务逻辑进行扩展 切入点： 只有满足切入点的表达式方法才可以执行通知 -->
	<!--4.1开启事务注解,扫描类上的注解@Transaction 后要写切入点表达式 -->
	<!-- <tx:annotation-driven /> -->

	<!--4.1配置声明式的事务注解 只用写@Transaction 不用写切入点表达式了 -->
	<!-- i.配置事务管理器 id:transactionManager固定写法 ，负责事务提交和回滚 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- ii.配置事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!--ii1:定义事务策略 哪些方法加上事务
				事务传播属性
				propagation="REQUIRED" 表示当前操作必须添加事务 A调B B挂起
				propagation="SUPPORTS" 表示事务支持，被动添加事务（看调用方是否有事务）
				
			ii2:spring中默认的事务策略
			规则：
				如果spring遇到运行时异常则默认回滚事务，
				如果spring中遇到检测异常/编译异常 sql 异常 io异常 自定义异常（throw）
				rollback-for="" 指定回滚异常 
				no-rollback-for="" 指定非回滚异常
				
			ii3:
				如果程序中需要处理异常，则需要考虑事务的回滚特性，一般讲检测异常转化为运行时异常
				throw new RuntimeException
				
			ii4:
			read-only="true" 表示此操作数据只读
		-->
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!-- iii.配置事务切面 -->
		<aop:config>
		<!--切入点表达式  
			within表达式
				语法：within（包名.类名）
				例子：within(com.jt.manage.serviceImpl.UserServiceImpl)
							粗粒度的事务控制
			execution
				语法：	execution（返回值类型 包名，类名，方法名（参数列表））
				例子：
						execution execution(* com.jt.manage.service.*.*(..))
		-->
			<aop:pointcut expression="execution(* com.jt.manage.service.*.*(..))" id="pc"/>
			<!--配置通知  -->
			<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
		</aop:config>
		
		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<property name="defaultEncoding" value="UTF-8"></property>
			<property name="maxInMemorySize" value="10240000"></property>
		</bean>
</beans>